// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: java.flex

/*
 * Copyright (C) 1998-2018  Gerwin Klein <lsf@jflex.de>
 * SPDX-License-Identifier: GPL-2.0-only
 */

/* Java 1.2 language lexer specification */

/* Use together with unicode.flex for Unicode preprocesssing */
/* and java12.cup for a Java 1.2 parser                      */

/* Note that this lexer specification is not tuned for speed.
   It is in fact quite slow on integer and floating point literals,
   because the input is read twice and the methods used to parse
   the numbers are not very fast.
   For a production quality application (e.g. a Java compiler)
   this could be optimized */


import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class Scanner extends sym implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\10\u2e00"+
    "\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000\1\u5100"+
    "\3\u0100\1\u5200\1\u5300\1\u5400\11\u1f00\1\u5500\4\u0100\1\u5600"+
    "\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900\2\u1f00"+
    "\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00\41\u1f00"+
    "\1\u5f00\1\u0100\1\u6000\1\u6100\11\u1f00\1\u6200\22\u1f00\1\u6300"+
    "\1\u1f00\1\u6400\1\u6500\1\u1f00\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\2\u1f00\1\u6a00\4\u1f00\1\u6b00\1\u6c00\1\u6d00\1\u6e00\4\u1f00"+
    "\1\u6f00\1\u7000\1\u7100\2\u1f00\1\u7200\1\u1f00\1\u7300\14\u1f00"+
    "\1\u7400\4\u1f00\246\u0100\1\u7500\20\u0100\1\u7600\1\u7700\25\u0100"+
    "\1\u7800\34\u0100\1\u7900\14\u1f00\2\u0100\1\u7a00\5\u1f00\23\u0100"+
    "\1\u7b00\u0aec\u1f00\1\u7c00\1\u7d00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\6\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\6\3\45\1\46\1\47\1\50\5\11\1\51\13\11"+
    "\1\52\2\11\1\53\1\54\1\55\1\56\1\11\1\6"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\11\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\11\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\6\1\107\1\6\1\110\6\0\1\111"+
    "\32\0\2\6\4\11\4\6\1\11\2\6\1\0\7\6"+
    "\1\11\4\6\1\11\5\6\27\11\1\6\37\11\1\6"+
    "\u01ca\11\4\6\14\11\16\6\5\11\7\6\1\11\1\6"+
    "\1\11\21\6\160\0\5\11\1\6\2\11\2\6\4\11"+
    "\1\6\1\11\6\6\1\11\1\6\3\11\1\6\1\11"+
    "\1\6\24\11\1\6\123\11\1\6\213\11\1\6\5\0"+
    "\2\6\246\11\1\6\46\11\2\6\1\11\6\6\51\11"+
    "\6\6\1\11\1\6\55\0\1\6\1\0\1\6\2\0"+
    "\1\6\2\0\1\6\1\0\10\6\33\11\4\6\4\11"+
    "\15\6\6\0\5\6\1\11\4\6\13\0\1\6\1\0"+
    "\3\6\53\11\37\0\4\6\2\11\1\0\143\11\1\6"+
    "\1\11\10\0\1\6\6\0\2\11\2\0\1\6\4\0"+
    "\2\11\12\0\3\11\2\6\1\11\17\6\1\0\1\11"+
    "\1\0\36\11\33\0\2\6\131\11\13\0\1\11\16\6"+
    "\12\0\41\11\11\0\2\11\4\6\1\11\2\6\1\0"+
    "\30\11\4\0\1\11\11\0\1\11\3\0\1\11\5\0"+
    "\22\6\31\11\3\0\4\6\13\11\5\6\30\11\1\6"+
    "\6\11\1\6\2\0\6\6\10\0\52\11\72\0\66\11"+
    "\3\0\1\11\22\0\1\11\7\0\12\11\2\0\2\6"+
    "\12\0\1\6\20\11\3\0\1\6\10\11\2\6\2\11"+
    "\2\6\26\11\1\6\7\11\1\6\1\11\3\6\4\11"+
    "\2\6\1\0\1\11\7\0\2\6\2\0\2\6\3\0"+
    "\1\11\10\6\1\0\4\6\2\11\1\6\3\11\2\0"+
    "\2\6\12\0\4\11\7\6\2\11\1\6\1\0\2\6"+
    "\3\0\1\6\6\11\4\6\2\11\2\6\26\11\1\6"+
    "\7\11\1\6\2\11\1\6\2\11\1\6\2\11\2\6"+
    "\1\0\1\6\5\0\4\6\2\0\2\6\3\0\3\6"+
    "\1\0\7\6\4\11\1\6\1\11\7\6\14\0\3\11"+
    "\1\0\13\6\3\0\1\6\11\11\1\6\3\11\1\6"+
    "\26\11\1\6\7\11\1\6\2\11\1\6\5\11\2\6"+
    "\1\0\1\11\10\0\1\6\3\0\1\6\3\0\2\6"+
    "\1\11\17\6\2\11\2\0\2\6\12\0\1\6\1\11"+
    "\7\6\1\11\6\0\1\6\3\0\1\6\10\11\2\6"+
    "\2\11\2\6\26\11\1\6\7\11\1\6\2\11\1\6"+
    "\5\11\2\6\1\0\1\11\7\0\2\6\2\0\2\6"+
    "\3\0\7\6\3\0\4\6\2\11\1\6\3\11\2\0"+
    "\2\6\12\0\1\6\1\11\20\6\1\0\1\11\1\6"+
    "\6\11\3\6\3\11\1\6\4\11\3\6\2\11\1\6"+
    "\1\11\1\6\2\11\3\6\2\11\3\6\3\11\3\6"+
    "\14\11\4\6\5\0\3\6\3\0\1\6\4\0\2\6"+
    "\1\11\6\6\1\0\16\6\12\0\11\6\1\11\6\6"+
    "\5\0\10\11\1\6\3\11\1\6\27\11\1\6\20\11"+
    "\2\6\1\0\1\11\7\0\1\6\3\0\1\6\4\0"+
    "\7\6\2\0\1\6\3\11\2\6\1\11\2\6\2\11"+
    "\2\0\2\6\12\0\20\6\1\11\3\0\1\6\10\11"+
    "\1\6\3\11\1\6\27\11\1\6\12\11\1\6\5\11"+
    "\2\6\1\0\1\11\7\0\1\6\3\0\1\6\4\0"+
    "\7\6\2\0\6\6\2\11\1\6\2\11\2\0\2\6"+
    "\12\0\1\6\2\11\15\6\4\0\11\11\1\6\3\11"+
    "\1\6\51\11\2\0\1\11\7\0\1\6\3\0\1\6"+
    "\4\0\1\11\5\6\3\11\1\0\7\6\3\11\2\0"+
    "\2\6\12\0\12\6\6\11\1\6\3\0\1\6\22\11"+
    "\3\6\30\11\1\6\11\11\1\6\1\11\2\6\7\11"+
    "\3\6\1\0\4\6\6\0\1\6\1\0\1\6\10\0"+
    "\6\6\12\0\2\6\2\0\15\6\60\11\1\0\2\11"+
    "\7\0\4\6\10\11\10\0\1\6\12\0\47\6\2\11"+
    "\1\6\1\11\1\6\5\11\1\6\30\11\1\6\1\11"+
    "\1\6\12\11\1\0\2\11\11\0\1\11\2\6\5\11"+
    "\1\6\1\11\1\6\6\0\2\6\12\0\2\6\4\11"+
    "\40\6\1\11\27\6\2\0\6\6\12\0\13\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\2\0\10\11\1\6"+
    "\44\11\4\6\24\0\1\6\2\0\5\11\13\0\1\6"+
    "\44\0\11\6\1\0\71\6\53\11\24\0\1\11\12\0"+
    "\6\6\6\11\4\0\4\11\3\0\1\11\3\0\2\11"+
    "\7\0\3\11\4\0\15\11\14\0\1\11\17\0\2\6"+
    "\46\11\1\6\1\11\5\6\1\11\2\6\53\11\1\6"+
    "\115\11\1\6\4\11\2\6\7\11\1\6\1\11\1\6"+
    "\4\11\2\6\51\11\1\6\4\11\2\6\41\11\1\6"+
    "\4\11\2\6\7\11\1\6\1\11\1\6\4\11\2\6"+
    "\17\11\1\6\71\11\1\6\4\11\2\6\103\11\2\6"+
    "\3\0\40\6\20\11\20\6\126\11\2\6\6\11\3\6"+
    "\u016c\11\2\6\21\11\1\6\32\11\5\6\113\11\3\6"+
    "\13\11\7\6\22\11\4\0\11\6\23\11\3\0\13\6"+
    "\22\11\2\0\14\6\15\11\1\6\3\11\1\6\2\0"+
    "\14\6\64\11\40\0\3\6\1\11\3\6\2\11\1\0"+
    "\2\6\12\0\41\6\17\0\6\6\131\11\7\6\5\11"+
    "\2\0\42\11\1\0\1\11\5\6\106\11\12\6\37\11"+
    "\1\6\14\0\4\6\14\0\12\6\12\0\36\11\2\6"+
    "\5\11\13\6\54\11\4\6\32\11\6\6\12\0\46\6"+
    "\27\11\5\0\4\6\65\11\12\0\1\6\35\0\2\6"+
    "\13\0\6\6\12\0\15\6\1\11\10\6\16\0\1\6"+
    "\20\0\61\6\5\0\57\11\21\0\10\11\3\6\12\0"+
    "\21\6\11\0\14\6\3\0\36\11\15\0\2\11\12\0"+
    "\54\11\16\0\14\6\44\11\24\0\10\6\12\0\3\6"+
    "\3\11\12\0\44\11\2\6\11\11\7\6\53\11\2\6"+
    "\3\11\20\6\3\0\1\6\25\0\4\11\1\0\6\11"+
    "\1\0\2\11\3\0\1\11\5\6\300\11\100\0\26\11"+
    "\2\6\6\11\2\6\46\11\2\6\6\11\2\6\10\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\37\11"+
    "\2\6\65\11\1\6\7\11\1\6\1\11\3\6\3\11"+
    "\1\6\7\11\3\6\4\11\2\6\6\11\4\6\15\11"+
    "\5\6\3\11\1\6\7\11\16\6\5\0\30\6\2\3"+
    "\5\0\20\6\2\11\23\6\1\11\13\6\5\0\1\6"+
    "\12\0\1\6\1\11\15\6\1\11\20\6\15\11\3\6"+
    "\41\11\17\6\15\0\4\6\1\0\3\6\14\0\21\6"+
    "\1\11\4\6\1\11\2\6\12\11\1\6\1\11\3\6"+
    "\5\11\6\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\4\11\1\6\13\11\2\6\4\11\5\6\5\11\4\6"+
    "\1\11\21\6\51\11\u0177\6\345\11\6\6\4\11\3\0"+
    "\2\11\14\6\46\11\1\6\1\11\5\6\1\11\2\6"+
    "\70\11\7\6\1\11\17\6\1\0\27\11\11\6\7\11"+
    "\1\6\7\11\1\6\7\11\1\6\7\11\1\6\7\11"+
    "\1\6\7\11\1\6\7\11\1\6\7\11\1\6\40\0"+
    "\57\6\1\11\325\6\3\11\31\6\11\11\6\0\1\6"+
    "\5\11\2\6\5\11\4\6\126\11\2\6\2\0\2\6"+
    "\3\11\1\6\132\11\1\6\4\11\5\6\53\11\1\6"+
    "\136\11\21\6\40\11\60\6\320\11\100\6\215\11\103\6"+
    "\56\11\2\6\15\11\3\6\20\11\12\0\2\11\24\6"+
    "\57\11\1\0\4\6\12\0\1\6\37\11\2\0\120\11"+
    "\2\0\45\6\11\11\2\6\147\11\2\6\100\11\5\6"+
    "\2\11\1\6\1\11\1\6\5\11\30\6\20\11\1\0"+
    "\3\11\1\0\4\11\1\0\27\11\5\0\4\6\1\0"+
    "\13\6\1\11\7\6\64\11\14\6\2\0\62\11\22\0"+
    "\12\6\12\0\6\6\22\0\6\11\3\6\1\11\1\6"+
    "\2\11\13\0\34\11\10\0\2\6\27\11\15\0\14\6"+
    "\35\11\3\6\4\0\57\11\16\0\16\6\1\11\12\0"+
    "\6\6\5\11\1\0\12\11\12\0\5\11\1\6\51\11"+
    "\16\0\11\6\3\11\1\0\10\11\2\0\2\6\12\0"+
    "\6\6\27\11\3\6\1\11\3\0\62\11\1\0\1\11"+
    "\3\0\2\11\2\0\5\11\2\0\1\11\1\0\1\11"+
    "\30\6\3\11\2\6\13\11\5\0\2\6\3\11\2\0"+
    "\12\6\6\11\2\6\6\11\2\6\6\11\11\6\7\11"+
    "\1\6\7\11\1\6\53\11\1\6\16\11\6\6\163\11"+
    "\10\0\1\6\2\0\2\6\12\0\6\6\244\11\14\6"+
    "\27\11\4\6\61\11\4\6\u0100\3\156\11\2\6\152\11"+
    "\46\6\7\11\14\6\5\11\5\6\1\11\1\0\12\11"+
    "\1\6\15\11\1\6\5\11\1\6\1\11\1\6\2\11"+
    "\1\6\2\11\1\6\154\11\41\6\153\11\22\6\100\11"+
    "\2\6\66\11\50\6\15\11\3\6\20\0\20\6\20\0"+
    "\3\6\2\11\30\6\3\11\31\6\1\11\6\6\5\11"+
    "\1\6\207\11\2\6\1\0\4\6\1\11\13\6\12\0"+
    "\7\6\32\11\4\6\1\11\1\6\32\11\13\6\131\11"+
    "\3\6\6\11\2\6\6\11\2\6\6\11\2\6\3\11"+
    "\3\6\2\11\3\6\2\11\22\6\3\0\4\6\14\11"+
    "\1\6\32\11\1\6\23\11\1\6\2\11\1\6\17\11"+
    "\2\6\16\11\42\6\173\11\105\6\65\11\210\6\1\0"+
    "\202\6\35\11\3\6\61\11\17\6\1\0\37\6\40\11"+
    "\15\6\36\11\5\6\46\11\5\0\5\6\36\11\2\6"+
    "\44\11\4\6\10\11\1\6\5\11\52\6\236\11\2\6"+
    "\12\0\6\6\44\11\4\6\44\11\4\6\50\11\10\6"+
    "\64\11\14\6\13\11\1\6\17\11\1\6\7\11\1\6"+
    "\2\11\1\6\13\11\1\6\17\11\1\6\7\11\1\6"+
    "\2\11\103\6\67\11\11\6\26\11\12\6\10\11\30\6"+
    "\6\11\1\6\52\11\1\6\11\11\105\6\6\11\2\6"+
    "\1\11\1\6\54\11\1\6\2\11\3\6\1\11\2\6"+
    "\27\11\12\6\27\11\11\6\37\11\101\6\23\11\1\6"+
    "\2\11\12\6\26\11\12\6\32\11\106\6\70\11\6\6"+
    "\2\11\100\6\1\11\3\0\1\6\2\0\5\6\4\0"+
    "\4\11\1\6\3\11\1\6\35\11\2\6\3\0\4\6"+
    "\1\0\40\6\35\11\3\6\35\11\43\6\10\11\1\6"+
    "\34\11\2\0\31\6\66\11\12\6\26\11\12\6\23\11"+
    "\15\6\22\11\156\6\111\11\67\6\63\11\15\6\63\11"+
    "\15\6\44\11\4\0\10\6\12\0\u0146\6\52\11\1\6"+
    "\2\0\3\6\2\11\116\6\35\11\12\6\1\11\10\6"+
    "\26\11\13\0\37\6\22\11\4\0\52\6\25\11\33\6"+
    "\27\11\11\6\3\0\65\11\17\0\37\6\13\0\2\11"+
    "\2\0\1\11\11\6\4\0\55\11\13\0\2\6\1\0"+
    "\4\6\1\0\12\6\1\0\2\6\31\11\7\6\12\0"+
    "\6\6\3\0\44\11\16\0\1\6\12\0\4\6\1\11"+
    "\2\0\1\11\10\6\43\11\1\0\2\6\1\11\11\6"+
    "\3\0\60\11\16\0\4\11\4\6\4\0\1\6\14\0"+
    "\1\11\1\6\1\11\43\6\22\11\1\6\31\11\14\0"+
    "\6\6\1\0\101\6\7\11\1\6\1\11\1\6\4\11"+
    "\1\6\17\11\1\6\12\11\7\6\57\11\14\0\5\6"+
    "\12\0\6\6\4\0\1\6\10\11\2\6\2\11\2\6"+
    "\26\11\1\6\7\11\1\6\2\11\1\6\5\11\1\6"+
    "\2\0\1\11\7\0\2\6\2\0\2\6\3\0\2\6"+
    "\1\11\6\6\1\0\5\6\5\11\2\0\2\6\7\0"+
    "\3\6\5\0\213\6\65\11\22\0\4\11\5\6\12\0"+
    "\4\6\1\0\3\11\36\6\60\11\24\0\2\11\1\6"+
    "\1\11\10\6\12\0\246\6\57\11\7\0\2\6\11\0"+
    "\27\6\4\11\2\0\42\6\60\11\21\0\3\6\1\11"+
    "\13\6\12\0\46\6\53\11\15\0\1\11\7\6\12\0"+
    "\66\6\33\11\2\6\17\0\4\6\12\0\6\6\7\11"+
    "\271\6\54\11\17\0\145\6\100\11\12\0\25\6\10\11"+
    "\2\6\1\11\2\6\10\11\1\6\2\11\1\6\30\11"+
    "\6\0\1\6\2\0\2\6\4\0\1\11\1\0\1\11"+
    "\2\0\14\6\12\0\106\6\10\11\2\6\47\11\7\0"+
    "\2\6\7\0\1\11\1\6\1\11\1\0\33\6\1\11"+
    "\12\0\50\11\7\0\1\11\4\0\10\6\1\0\10\6"+
    "\1\11\13\0\56\11\20\0\3\6\1\11\22\6\111\11"+
    "\7\6\11\11\1\6\45\11\10\0\1\6\10\0\1\11"+
    "\17\6\12\0\30\6\36\11\2\6\26\0\1\6\16\0"+
    "\111\6\7\11\1\6\2\11\1\6\46\11\6\0\3\6"+
    "\1\0\1\6\2\0\1\6\7\0\1\11\1\0\10\6"+
    "\12\0\6\6\6\11\1\6\2\11\1\6\40\11\5\0"+
    "\1\6\2\0\1\6\5\0\1\11\7\6\12\0\u0136\6"+
    "\23\11\4\0\271\6\1\11\54\6\4\11\37\6\232\11"+
    "\146\6\157\11\21\6\304\11\u014c\6\141\11\17\6\57\11"+
    "\1\6\11\0\307\6\107\11\271\6\71\11\7\6\37\11"+
    "\1\6\12\0\6\6\117\11\1\6\12\0\6\6\36\11"+
    "\2\6\5\0\13\6\60\11\7\0\11\6\4\11\14\6"+
    "\12\0\11\6\25\11\5\6\23\11\260\6\100\11\200\6"+
    "\113\11\4\6\1\0\1\11\67\0\7\6\4\0\15\11"+
    "\100\6\2\11\1\6\1\11\1\0\13\6\2\0\16\6"+
    "\370\11\10\6\326\11\52\6\11\11\u01e7\6\4\11\1\6"+
    "\7\11\1\6\2\11\1\6\43\11\55\6\3\11\21\6"+
    "\4\11\10\6\u018c\11\4\6\153\11\5\6\15\11\3\6"+
    "\11\11\7\6\12\11\3\6\2\0\1\6\4\0\134\6"+
    "\56\0\2\6\27\0\u011e\6\5\0\3\6\26\0\2\6"+
    "\7\0\36\6\4\0\224\6\3\0\273\6\125\11\1\6"+
    "\107\11\1\6\2\11\2\6\1\11\2\6\2\11\2\6"+
    "\4\11\1\6\14\11\1\6\1\11\1\6\7\11\1\6"+
    "\101\11\1\6\4\11\2\6\10\11\1\6\7\11\1\6"+
    "\34\11\1\6\4\11\1\6\5\11\1\6\1\11\3\6"+
    "\7\11\1\6\u0154\11\2\6\31\11\1\6\31\11\1\6"+
    "\37\11\1\6\31\11\1\6\37\11\1\6\31\11\1\6"+
    "\37\11\1\6\31\11\1\6\37\11\1\6\31\11\1\6"+
    "\10\11\2\6\151\0\4\6\62\0\10\6\1\0\16\6"+
    "\1\0\26\6\5\0\1\6\17\0\120\6\37\11\341\6"+
    "\7\0\1\6\21\0\2\6\7\0\1\6\2\0\1\6"+
    "\5\0\325\6\55\11\3\6\7\0\7\11\2\6\12\0"+
    "\4\6\1\11\u0141\6\36\11\1\0\21\6\54\11\16\0"+
    "\5\6\1\11\340\6\7\11\1\6\4\11\1\6\2\11"+
    "\1\6\17\11\1\6\305\11\13\6\7\0\51\6\104\11"+
    "\7\0\1\11\4\6\12\0\u0156\6\1\11\117\6\4\11"+
    "\1\6\33\11\1\6\2\11\1\6\1\11\2\6\1\11"+
    "\1\6\12\11\1\6\4\11\1\6\1\11\1\6\1\11"+
    "\6\6\1\11\4\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\3\11\1\6\2\11\1\6\1\11\2\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\2\11\1\6\1\11\2\6\4\11\1\6\7\11"+
    "\1\6\4\11\1\6\4\11\1\6\1\11\1\6\12\11"+
    "\1\6\21\11\5\6\3\11\1\6\5\11\1\6\21\11"+
    "\u0134\6\12\0\6\6\340\11\40\6\71\11\7\6\336\11"+
    "\2\6\u0182\11\16\6\u0131\11\37\6\36\11\342\6\113\11"+
    "\266\6\1\0\36\6\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32256];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\2\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\21\5\1\33\1\34\1\35\2\36"+
    "\1\37\2\1\2\40\1\1\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\0\1\51\1\52\1\0"+
    "\1\2\1\53\4\54\1\52\1\55\1\0\1\56\1\57"+
    "\1\0\1\60\1\61\1\62\1\63\1\64\1\65\12\5"+
    "\1\66\10\5\1\67\24\5\1\70\1\71\1\72\1\73"+
    "\1\74\2\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\12\72\2\0\1\105\2\54\1\0\1\52\2\106"+
    "\1\107\1\110\1\111\15\5\1\112\4\5\1\113\3\5"+
    "\1\114\3\5\1\115\20\5\1\116\3\5\1\75\1\117"+
    "\1\120\1\121\2\0\1\122\1\123\1\124\1\125\1\126"+
    "\1\127\1\0\2\54\1\130\1\106\1\131\4\5\1\132"+
    "\1\133\1\5\1\134\5\5\1\135\4\5\1\136\4\5"+
    "\1\137\1\140\1\5\1\141\14\5\1\142\2\5\1\143"+
    "\1\144\2\5\1\0\2\54\1\106\1\5\1\145\1\5"+
    "\1\146\1\147\1\150\1\151\4\5\1\152\1\153\1\154"+
    "\6\5\1\155\4\5\1\156\2\5\1\157\2\5\1\160"+
    "\2\5\1\161\1\0\2\54\1\106\4\5\1\162\3\5"+
    "\1\163\2\5\1\164\3\5\1\165\1\166\1\167\1\5"+
    "\1\170\1\5\1\171\2\5\1\0\2\54\1\106\1\5"+
    "\1\172\1\5\1\173\1\174\1\175\3\5\1\176\1\177"+
    "\5\5\1\0\2\54\1\106\1\200\1\201\4\5\1\202"+
    "\2\5\1\203\1\0\2\54\1\106\2\5\1\204\1\205"+
    "\1\5\1\206\1\0\2\54\1\106\1\207\1\210\1\5"+
    "\1\211\2\54\1\0\1\5\2\54\1\0\1\212\2\54"+
    "\1\0\2\54\1\0\2\54\1\0\2\54\1\0\1\54"+
    "\1\52\1\0\1\52\1\0\4\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[424];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\336\0\u0128\0\u0172\0\336"+
    "\0\u01bc\0\u0206\0\u0250\0\336\0\336\0\336\0\u029a\0\u02e4"+
    "\0\336\0\u032e\0\u0378\0\u03c2\0\u040c\0\u0456\0\336\0\336"+
    "\0\u04a0\0\u04ea\0\u0534\0\336\0\336\0\336\0\u057e\0\u05c8"+
    "\0\u0612\0\u065c\0\u06a6\0\u06f0\0\u073a\0\u0784\0\u07ce\0\u0818"+
    "\0\u0862\0\u08ac\0\u08f6\0\u0940\0\u098a\0\u09d4\0\u0a1e\0\u0a68"+
    "\0\u0ab2\0\336\0\u0afc\0\336\0\u0b46\0\336\0\u0b90\0\u0bda"+
    "\0\336\0\u0c24\0\u0c6e\0\336\0\336\0\336\0\336\0\336"+
    "\0\336\0\336\0\336\0\u0cb8\0\336\0\u0d02\0\u0d4c\0\u0d96"+
    "\0\336\0\u0de0\0\u0e2a\0\u0e74\0\u0ebe\0\u0f08\0\336\0\u0f52"+
    "\0\336\0\336\0\u0f9c\0\u0fe6\0\336\0\336\0\336\0\u1030"+
    "\0\336\0\u107a\0\u10c4\0\u110e\0\u1158\0\u11a2\0\u11ec\0\u1236"+
    "\0\u1280\0\u12ca\0\u1314\0\u135e\0\u13a8\0\u13f2\0\u143c\0\u1486"+
    "\0\u14d0\0\u151a\0\u1564\0\u15ae\0\u01bc\0\u15f8\0\u1642\0\u168c"+
    "\0\u16d6\0\u1720\0\u176a\0\u17b4\0\u17fe\0\u1848\0\u1892\0\u18dc"+
    "\0\u1926\0\u1970\0\u19ba\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2\0\u1b2c"+
    "\0\u1b76\0\336\0\336\0\336\0\336\0\336\0\u1bc0\0\u1c0a"+
    "\0\336\0\336\0\336\0\336\0\336\0\336\0\336\0\u1c54"+
    "\0\u1c9e\0\u1ce8\0\u1d32\0\u1d7c\0\u1dc6\0\u1e10\0\u1e5a\0\u1ea4"+
    "\0\u1eee\0\u1f38\0\u1f82\0\336\0\u1fcc\0\u2016\0\u2060\0\u20aa"+
    "\0\u20f4\0\u213e\0\336\0\336\0\u2188\0\u21d2\0\u221c\0\u2266"+
    "\0\u22b0\0\u22fa\0\u2344\0\u238e\0\u23d8\0\u2422\0\u246c\0\u24b6"+
    "\0\u2500\0\u254a\0\u01bc\0\u2594\0\u25de\0\u2628\0\u2672\0\u01bc"+
    "\0\u26bc\0\u2706\0\u2750\0\u279a\0\u27e4\0\u282e\0\u2878\0\u01bc"+
    "\0\u28c2\0\u290c\0\u2956\0\u29a0\0\u29ea\0\u2a34\0\u2a7e\0\u2ac8"+
    "\0\u2b12\0\u2b5c\0\u2ba6\0\u2bf0\0\u2c3a\0\u2c84\0\u2cce\0\u2d18"+
    "\0\u01bc\0\u2d62\0\u2dac\0\u2df6\0\336\0\336\0\336\0\336"+
    "\0\u1d32\0\u2e40\0\336\0\336\0\336\0\336\0\336\0\336"+
    "\0\u2e8a\0\u2ed4\0\u2f1e\0\336\0\u2f68\0\336\0\u2fb2\0\u2ffc"+
    "\0\u3046\0\u3090\0\u01bc\0\u01bc\0\u30da\0\u01bc\0\u3124\0\u316e"+
    "\0\u31b8\0\u3202\0\u324c\0\u01bc\0\u3296\0\u32e0\0\u332a\0\u3374"+
    "\0\u01bc\0\u33be\0\u3408\0\u3452\0\u349c\0\u01bc\0\u01bc\0\u34e6"+
    "\0\u01bc\0\u3530\0\u357a\0\u35c4\0\u360e\0\u3658\0\u36a2\0\u36ec"+
    "\0\u3736\0\u3780\0\u37ca\0\u3814\0\u385e\0\u01bc\0\u38a8\0\u38f2"+
    "\0\u01bc\0\u01bc\0\u393c\0\u3986\0\u39d0\0\u3a1a\0\u3a64\0\u3aae"+
    "\0\u3af8\0\u01bc\0\u3b42\0\u01bc\0\u01bc\0\u01bc\0\u01bc\0\u3b8c"+
    "\0\u3bd6\0\u3c20\0\u3c6a\0\u01bc\0\u3cb4\0\u01bc\0\u3cfe\0\u3d48"+
    "\0\u3d92\0\u3ddc\0\u3e26\0\u3e70\0\u01bc\0\u3eba\0\u3f04\0\u3f4e"+
    "\0\u3f98\0\u01bc\0\u3fe2\0\u402c\0\u01bc\0\u4076\0\u40c0\0\u410a"+
    "\0\u4154\0\u419e\0\u01bc\0\u41e8\0\u4232\0\u427c\0\u42c6\0\u4310"+
    "\0\u435a\0\u43a4\0\u43ee\0\u01bc\0\u4438\0\u4482\0\u44cc\0\u01bc"+
    "\0\u4516\0\u4560\0\u01bc\0\u45aa\0\u45f4\0\u463e\0\u01bc\0\u01bc"+
    "\0\u01bc\0\u4688\0\u01bc\0\u46d2\0\u01bc\0\u471c\0\u4766\0\u47b0"+
    "\0\u47fa\0\u4844\0\u488e\0\u48d8\0\u01bc\0\u4922\0\u01bc\0\u01bc"+
    "\0\u01bc\0\u496c\0\u49b6\0\u4a00\0\u01bc\0\u01bc\0\u4a4a\0\u4a94"+
    "\0\u4ade\0\u4b28\0\u4b72\0\u4bbc\0\u4c06\0\u4c50\0\u4c9a\0\u01bc"+
    "\0\u01bc\0\u4ce4\0\u4d2e\0\u4d78\0\u4dc2\0\u01bc\0\u4e0c\0\u4e56"+
    "\0\u01bc\0\u4ea0\0\u4eea\0\u4f34\0\u4f7e\0\u4fc8\0\u5012\0\u01bc"+
    "\0\u01bc\0\u505c\0\u01bc\0\u50a6\0\u50f0\0\u513a\0\u5184\0\u01bc"+
    "\0\u01bc\0\u51ce\0\336\0\u5218\0\u5262\0\u52ac\0\u52f6\0\u5340"+
    "\0\u538a\0\u53d4\0\u01bc\0\u541e\0\u5468\0\u54b2\0\u54fc\0\u5546"+
    "\0\u5590\0\u55da\0\u5624\0\u566e\0\u56b8\0\u5702\0\u574c\0\u5796"+
    "\0\u5796\0\u57e0\0\u582a\0\u5874\0\u58be\0\u5908\0\u5952\0\u599c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[424];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\1\5\1\6\1\4\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\11\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\6\11\1\35\1\4\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\11\1\47\1\11\1\50\1\51\1\52\1\11\1\53"+
    "\1\54\1\55\1\56\1\11\1\57\1\60\3\11\1\61"+
    "\1\62\1\4\2\63\1\64\2\63\1\65\2\63\1\66"+
    "\43\63\1\67\35\63\2\70\1\71\2\70\1\72\6\70"+
    "\1\4\37\70\1\73\35\70\114\0\1\5\151\0\1\74"+
    "\47\0\1\11\10\0\1\11\13\0\12\11\6\0\6\11"+
    "\4\0\30\11\2\0\1\11\42\0\1\75\62\0\1\76"+
    "\26\0\1\77\111\0\1\100\67\0\1\101\21\0\1\102"+
    "\71\0\1\103\4\0\1\104\12\0\1\105\74\0\12\106"+
    "\72\0\1\107\4\0\1\110\15\0\1\111\72\0\1\106"+
    "\1\0\1\112\1\113\2\114\4\115\2\116\7\0\1\117"+
    "\1\120\1\121\1\122\1\123\7\0\1\117\1\120\1\121"+
    "\4\0\1\122\12\0\1\123\30\0\1\106\1\0\12\26"+
    "\7\0\1\117\1\120\1\121\1\122\10\0\1\117\1\120"+
    "\1\121\4\0\1\122\61\0\1\124\1\125\111\0\1\126"+
    "\111\0\1\127\1\130\110\0\1\131\47\0\1\11\10\0"+
    "\1\11\13\0\12\11\6\0\6\11\4\0\1\11\1\132"+
    "\26\11\2\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\6\11\4\0\4\11\1\133\10\11\1\134\1\11\1\135"+
    "\6\11\1\136\1\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\1\137\6\11\1\140\2\11"+
    "\1\141\2\11\1\142\12\11\2\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\6\11\4\0\4\11\1\143\10\11"+
    "\1\144\12\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\12\11\1\145\1\11\1\146\10\11"+
    "\1\147\2\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\1\150\7\11\1\151\1\11\1\152"+
    "\2\11\1\153\12\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\15\11\1\154\12\11\2\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\5\11\1\155\5\11\1\156\1\157\13\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\15\11"+
    "\1\160\12\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\1\161\27\11\2\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\6\11\4\0\1\162\3\11"+
    "\1\163\15\11\1\164\5\11\2\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\6\11\4\0\1\165\16\11\1\166"+
    "\2\11\1\167\5\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\4\11\1\170\23\11\2\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\7\11\1\171\11\11\1\172\1\173\1\11\1\174\1\11"+
    "\1\175\1\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\7\11\1\176\7\11\1\177\10\11"+
    "\2\0\2\11\10\0\1\11\13\0\12\11\6\0\6\11"+
    "\4\0\15\11\1\200\12\11\2\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\6\11\4\0\7\11\1\201\20\11"+
    "\2\0\1\11\42\0\1\202\44\0\1\203\2\0\2\63"+
    "\1\0\2\63\1\0\2\63\1\0\43\63\1\0\35\63"+
    "\2\0\1\64\107\0\2\204\4\0\2\204\1\205\3\204"+
    "\1\206\10\204\4\207\4\210\17\204\1\211\3\204\1\212"+
    "\3\204\1\213\6\204\1\214\2\204\1\215\1\204\1\216"+
    "\10\204\15\0\1\217\77\0\1\71\107\0\2\204\4\0"+
    "\2\204\1\220\3\204\1\221\10\204\4\222\4\223\17\204"+
    "\1\224\3\204\1\225\3\204\1\226\6\204\1\227\2\204"+
    "\1\230\1\204\1\231\10\204\27\0\1\232\110\0\12\106"+
    "\7\0\1\117\1\120\1\121\11\0\1\117\1\120\1\121"+
    "\25\0\17\107\1\233\72\107\2\110\1\5\2\110\1\6"+
    "\104\110\23\0\1\106\1\0\1\112\1\113\2\114\4\115"+
    "\2\116\7\0\1\117\1\120\1\121\1\234\10\0\1\117"+
    "\1\120\1\121\4\0\1\234\43\0\1\106\1\0\10\115"+
    "\2\116\7\0\1\117\1\120\1\121\1\234\10\0\1\117"+
    "\1\120\1\121\4\0\1\234\43\0\1\106\1\0\10\235"+
    "\2\116\7\0\1\117\1\120\1\121\1\234\10\0\1\117"+
    "\1\120\1\121\4\0\1\234\43\0\1\106\1\0\10\236"+
    "\2\116\7\0\1\117\1\120\1\121\1\234\10\0\1\117"+
    "\1\120\1\121\4\0\1\234\43\0\1\106\1\0\12\116"+
    "\7\0\1\117\1\120\1\121\11\0\1\117\1\120\1\121"+
    "\45\0\1\237\1\0\1\237\2\0\12\240\100\0\1\241"+
    "\11\242\6\0\4\242\6\0\6\242\67\0\1\243\111\0"+
    "\1\244\1\245\46\0\1\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\20\11\1\246\7\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\6\11"+
    "\1\247\21\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\15\11\1\250\12\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\4\11"+
    "\1\251\23\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\21\11\1\252\6\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\20\11"+
    "\1\253\1\254\6\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\1\255\27\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\1\256"+
    "\27\11\2\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\6\11\4\0\14\11\1\257\13\11\2\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\6\11\4\0\5\11\1\260"+
    "\22\11\2\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\6\11\4\0\22\11\1\261\5\11\2\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\6\11\4\0\20\11\1\262"+
    "\7\11\2\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\6\11\4\0\3\11\1\263\24\11\2\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\6\11\4\0\21\11\1\264"+
    "\6\11\2\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\6\11\4\0\12\11\1\265\15\11\2\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\6\11\4\0\14\11\1\266"+
    "\13\11\2\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\6\11\4\0\15\11\1\267\12\11\2\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\6\11\4\0\17\11\1\270"+
    "\10\11\2\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\6\11\4\0\21\11\1\271\6\11\2\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\6\11\4\0\16\11\1\272"+
    "\11\11\2\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\6\11\4\0\20\11\1\273\1\274\6\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\14\11"+
    "\1\275\13\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\10\11\1\276\17\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\21\11"+
    "\1\277\6\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\24\11\1\300\3\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\12\11"+
    "\1\301\15\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\2\11\1\302\25\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\10\11"+
    "\1\303\4\11\1\304\12\11\2\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\6\11\4\0\1\11\1\305\26\11"+
    "\2\0\2\11\10\0\1\11\13\0\12\11\6\0\6\11"+
    "\4\0\21\11\1\306\6\11\2\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\6\11\4\0\15\11\1\307\12\11"+
    "\2\0\2\11\10\0\1\11\13\0\12\11\6\0\6\11"+
    "\4\0\1\310\16\11\1\311\10\11\2\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\6\11\4\0\16\11\1\312"+
    "\11\11\2\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\6\11\4\0\10\11\1\313\17\11\2\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\6\11\4\0\14\11\1\314"+
    "\13\11\2\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\6\11\4\0\10\11\1\315\6\11\1\316\10\11\2\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\1\317\21\11\1\320\3\11\1\321\1\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\10\11"+
    "\1\322\1\11\1\323\15\11\2\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\6\11\4\0\10\11\1\324\17\11"+
    "\2\0\1\11\25\0\10\210\102\0\10\325\71\0\1\326"+
    "\111\0\1\327\111\0\1\330\10\0\10\331\71\0\1\330"+
    "\10\0\10\332\71\0\1\333\111\0\1\334\111\0\1\335"+
    "\111\0\1\336\111\0\1\337\111\0\1\340\126\0\1\341"+
    "\60\0\17\107\1\233\4\107\1\5\65\107\23\0\1\106"+
    "\1\0\10\342\2\116\7\0\1\117\1\120\1\121\1\234"+
    "\10\0\1\117\1\120\1\121\4\0\1\234\43\0\1\106"+
    "\1\0\10\343\2\116\7\0\1\117\1\120\1\121\1\234"+
    "\10\0\1\117\1\120\1\121\4\0\1\234\45\0\12\240"+
    "\100\0\12\240\7\0\1\117\1\0\1\121\11\0\1\117"+
    "\1\0\1\121\52\0\1\241\11\242\6\0\4\242\1\344"+
    "\5\0\6\242\4\0\1\344\45\0\12\345\6\0\4\345"+
    "\1\344\5\0\6\345\4\0\1\344\62\0\1\346\47\0"+
    "\1\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\21\11\1\347\6\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\10\11\1\350\17\11\2\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\12\11\1\351\15\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\1\352\27\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\4\11"+
    "\1\353\23\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\4\11\1\354\23\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\2\11"+
    "\1\355\25\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\17\11\1\356\10\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\20\11"+
    "\1\357\7\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\20\11\1\360\1\361\6\11\2\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\1\362\27\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\1\11\1\363\26\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\4\11"+
    "\1\364\23\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\4\11\1\365\23\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\20\11"+
    "\1\366\7\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\1\367\27\11\2\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\6\11\4\0\1\370\27\11"+
    "\2\0\2\11\10\0\1\11\13\0\12\11\6\0\6\11"+
    "\4\0\15\11\1\371\12\11\2\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\6\11\4\0\12\11\1\372\2\11"+
    "\1\373\12\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\21\11\1\374\6\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\4\11"+
    "\1\375\23\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\6\11\1\376\21\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\14\11"+
    "\1\377\13\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\10\11\1\u0100\17\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\12\11"+
    "\1\u0101\15\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\11\11\1\u0102\16\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\14\11"+
    "\1\u0103\6\11\1\u0104\4\11\2\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\6\11\4\0\21\11\1\u0105\6\11"+
    "\2\0\2\11\10\0\1\11\13\0\12\11\6\0\6\11"+
    "\4\0\12\11\1\u0106\15\11\2\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\6\11\4\0\22\11\1\u0107\5\11"+
    "\2\0\2\11\10\0\1\11\13\0\12\11\6\0\6\11"+
    "\4\0\17\11\1\u0108\10\11\2\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\6\11\4\0\21\11\1\u0109\6\11"+
    "\2\0\2\11\10\0\1\11\13\0\12\11\6\0\6\11"+
    "\4\0\10\11\1\u010a\17\11\2\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\6\11\4\0\4\11\1\u010b\23\11"+
    "\2\0\2\11\10\0\1\11\13\0\12\11\6\0\6\11"+
    "\4\0\21\11\1\u010c\6\11\2\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\6\11\4\0\2\11\1\u010d\25\11"+
    "\2\0\2\11\10\0\1\11\13\0\12\11\6\0\6\11"+
    "\4\0\20\11\1\u010e\7\11\2\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\6\11\4\0\15\11\1\u010f\12\11"+
    "\2\0\2\11\10\0\1\11\13\0\12\11\6\0\6\11"+
    "\4\0\14\11\1\u0110\13\11\2\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\6\11\4\0\4\11\1\u0111\23\11"+
    "\2\0\2\11\10\0\1\11\13\0\12\11\6\0\6\11"+
    "\4\0\3\11\1\u0112\24\11\2\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\6\11\4\0\1\u0113\27\11\2\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\12\11\1\u0114\15\11\2\0\1\11\14\0\1\330\131\0"+
    "\1\u0115\100\0\1\106\1\0\10\u0116\2\116\7\0\1\117"+
    "\1\120\1\121\1\234\10\0\1\117\1\120\1\121\4\0"+
    "\1\234\43\0\1\106\1\0\10\u0117\2\116\7\0\1\117"+
    "\1\120\1\121\1\234\10\0\1\117\1\120\1\121\4\0"+
    "\1\234\45\0\12\u0118\6\0\4\u0118\1\344\5\0\6\u0118"+
    "\4\0\1\344\20\0\1\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\17\11\1\u0119\10\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\14\11"+
    "\1\u011a\13\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\4\11\1\u011b\23\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\11\11"+
    "\1\u011c\16\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\7\11\1\u011d\20\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\20\11"+
    "\1\u011e\7\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\21\11\1\u011f\6\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\10\11"+
    "\1\u0120\17\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\22\11\1\u0121\5\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\12\11"+
    "\1\u0122\15\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\14\11\1\u0123\13\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\4\11"+
    "\1\u0124\23\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\12\11\1\u0125\15\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\21\11"+
    "\1\u0126\6\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\4\11\1\u0127\23\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\17\11"+
    "\1\u0128\10\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\1\u0129\27\11\2\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\6\11\4\0\17\11\1\u012a"+
    "\10\11\2\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\6\11\4\0\23\11\1\u012b\4\11\2\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\6\11\4\0\1\u012c\27\11"+
    "\2\0\2\11\10\0\1\11\13\0\12\11\6\0\6\11"+
    "\4\0\21\11\1\u012d\6\11\2\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\6\11\4\0\1\u012e\27\11\2\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\4\11\1\u012f\23\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\10\11\1\u0130\17\11\2\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\17\11\1\u0131\10\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\21\11\1\u0132\6\11\2\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\10\11\1\u0133\17\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\2\11\1\u0134\25\11\2\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\17\11\1\u0135\10\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\2\11\1\u0136\25\11\2\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\7\11\1\u0137\20\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\24\11\1\u0138\3\11\2\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\20\11\1\u0139\7\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\21\11\1\u013a\6\11\2\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\4\11\1\u013b\23\11\2\0\1\11\31\0\1\u013c\103\0"+
    "\1\106\1\0\10\u013d\2\116\7\0\1\117\1\120\1\121"+
    "\1\234\10\0\1\117\1\120\1\121\4\0\1\234\43\0"+
    "\1\106\1\0\10\u013e\2\116\7\0\1\117\1\120\1\121"+
    "\1\234\10\0\1\117\1\120\1\121\4\0\1\234\45\0"+
    "\12\u013f\6\0\4\u013f\1\344\5\0\6\u013f\4\0\1\344"+
    "\20\0\1\11\10\0\1\11\13\0\12\11\6\0\6\11"+
    "\4\0\1\u0140\27\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\1\u0141\27\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\14\11"+
    "\1\u0142\13\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\12\11\1\u0143\15\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\4\11"+
    "\1\u0144\23\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\3\11\1\u0145\24\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\12\11"+
    "\1\u0146\15\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\13\11\1\u0147\14\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\21\11"+
    "\1\u0148\6\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\14\11\1\u0149\13\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\5\11"+
    "\1\u014a\22\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\4\11\1\u014b\23\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\6\11"+
    "\1\u014c\21\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\21\11\1\u014d\6\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\2\11"+
    "\1\u014e\25\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\2\11\1\u014f\25\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\14\11"+
    "\1\u0150\13\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\2\11\1\u0151\25\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\21\11"+
    "\1\u0152\6\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\7\11\1\u0153\20\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\17\11"+
    "\1\u0154\10\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\20\11\1\u0155\7\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\10\11"+
    "\1\u0156\17\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\10\11\1\u0157\17\11\2\0\1\11"+
    "\35\0\1\u0158\77\0\1\106\1\0\10\u0159\2\116\7\0"+
    "\1\117\1\120\1\121\1\234\10\0\1\117\1\120\1\121"+
    "\4\0\1\234\43\0\1\106\1\0\10\u015a\2\116\7\0"+
    "\1\117\1\120\1\121\1\234\10\0\1\117\1\120\1\121"+
    "\4\0\1\234\45\0\12\u015b\6\0\4\u015b\1\344\5\0"+
    "\6\u015b\4\0\1\344\20\0\1\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\2\11\1\u015c\25\11\2\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\14\11\1\u015d\13\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\22\11\1\u015e\5\11\2\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\21\11\1\u015f\6\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\20\11\1\u0160\7\11\2\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\26\11\1\u0161\1\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\4\11\1\u0162\23\11\2\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\2\11\1\u0163\25\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\1\u0164\27\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\4\11"+
    "\1\u0165\23\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\4\11\1\u0166\23\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\21\11"+
    "\1\u0167\6\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\5\11\1\u0168\22\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\15\11"+
    "\1\u0169\12\11\2\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\6\11\4\0\4\11\1\u016a\23\11\2\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\6\11\4\0\12\11"+
    "\1\u016b\15\11\2\0\1\11\30\0\1\u016c\104\0\1\106"+
    "\1\0\10\u016d\2\116\7\0\1\117\1\120\1\121\1\234"+
    "\10\0\1\117\1\120\1\121\4\0\1\234\43\0\1\106"+
    "\1\0\10\u016e\2\116\7\0\1\117\1\120\1\121\1\234"+
    "\10\0\1\117\1\120\1\121\4\0\1\234\45\0\12\u016f"+
    "\6\0\4\u016f\1\344\5\0\6\u016f\4\0\1\344\20\0"+
    "\1\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\21\11\1\u0170\6\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\4\11\1\u0171\23\11\2\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\14\11\1\u0172\13\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\4\11\1\u0173\23\11\2\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\2\11\1\u0174\25\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\4\11\1\u0175\23\11\2\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\16\11\1\u0176\11\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\14\11\1\u0177\13\11\2\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\4\0"+
    "\14\11\1\u0178\13\11\2\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\6\11\4\0\4\11\1\u0179\23\11\2\0"+
    "\1\11\33\0\1\u017a\101\0\1\106\1\0\10\u017b\2\116"+
    "\7\0\1\117\1\120\1\121\1\234\10\0\1\117\1\120"+
    "\1\121\4\0\1\234\43\0\1\106\1\0\10\u017c\2\116"+
    "\7\0\1\117\1\120\1\121\1\234\10\0\1\117\1\120"+
    "\1\121\4\0\1\234\45\0\12\u017d\6\0\4\u017d\1\344"+
    "\5\0\6\u017d\4\0\1\344\20\0\1\11\10\0\1\11"+
    "\13\0\12\11\6\0\6\11\4\0\21\11\1\u017e\6\11"+
    "\2\0\2\11\10\0\1\11\13\0\12\11\6\0\6\11"+
    "\4\0\15\11\1\u017f\12\11\2\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\6\11\4\0\4\11\1\u0180\23\11"+
    "\2\0\2\11\10\0\1\11\13\0\12\11\6\0\6\11"+
    "\4\0\3\11\1\u0181\24\11\2\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\6\11\4\0\10\11\1\u0182\17\11"+
    "\2\0\2\11\10\0\1\11\13\0\12\11\6\0\6\11"+
    "\4\0\21\11\1\u0183\6\11\2\0\1\11\31\0\1\u0184"+
    "\103\0\1\106\1\0\10\u0185\2\116\7\0\1\117\1\120"+
    "\1\121\1\234\10\0\1\117\1\120\1\121\4\0\1\234"+
    "\43\0\1\106\1\0\10\u0186\2\116\7\0\1\117\1\120"+
    "\1\121\1\234\10\0\1\117\1\120\1\121\4\0\1\234"+
    "\45\0\12\u0187\6\0\4\u0187\1\344\5\0\6\u0187\4\0"+
    "\1\344\20\0\1\11\10\0\1\11\13\0\12\11\6\0"+
    "\6\11\4\0\20\11\1\u0188\7\11\2\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\6\11\4\0\5\11\1\u0189"+
    "\22\11\2\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\6\11\4\0\27\11\1\u018a\2\0\1\11\35\0\1\u018b"+
    "\77\0\1\106\1\0\10\u018c\2\116\7\0\1\117\1\120"+
    "\1\121\1\234\10\0\1\117\1\120\1\121\4\0\1\234"+
    "\43\0\1\106\1\0\10\u018d\2\116\7\0\1\117\1\120"+
    "\1\121\1\234\10\0\1\117\1\120\1\121\4\0\1\234"+
    "\45\0\12\u018e\6\0\4\u018e\1\344\5\0\6\u018e\4\0"+
    "\1\344\20\0\1\11\10\0\1\11\13\0\12\11\6\0"+
    "\6\11\4\0\4\11\1\u018f\23\11\2\0\1\11\23\0"+
    "\1\106\1\0\10\u0190\2\116\7\0\1\117\1\120\1\121"+
    "\1\234\10\0\1\117\1\120\1\121\4\0\1\234\43\0"+
    "\1\106\1\0\10\u0191\2\116\7\0\1\117\1\120\1\121"+
    "\1\234\10\0\1\117\1\120\1\121\4\0\1\234\45\0"+
    "\12\u0192\6\0\4\u0192\1\344\5\0\6\u0192\4\0\1\344"+
    "\20\0\1\11\10\0\1\11\13\0\12\11\6\0\6\11"+
    "\4\0\3\11\1\u0193\24\11\2\0\1\11\23\0\1\106"+
    "\1\0\10\u0194\2\116\7\0\1\117\1\120\1\121\1\234"+
    "\10\0\1\117\1\120\1\121\4\0\1\234\43\0\1\106"+
    "\1\0\10\u0195\2\116\7\0\1\117\1\120\1\121\1\234"+
    "\10\0\1\117\1\120\1\121\4\0\1\234\45\0\12\u0196"+
    "\6\0\4\u0196\1\344\5\0\6\u0196\4\0\1\344\43\0"+
    "\1\106\1\0\10\u0197\2\116\7\0\1\117\1\120\1\121"+
    "\1\234\10\0\1\117\1\120\1\121\4\0\1\234\43\0"+
    "\1\106\1\0\10\u0198\2\116\7\0\1\117\1\120\1\121"+
    "\1\234\10\0\1\117\1\120\1\121\4\0\1\234\45\0"+
    "\12\u0199\6\0\4\u0199\1\344\5\0\6\u0199\4\0\1\344"+
    "\43\0\1\106\1\0\10\u019a\2\116\7\0\1\117\1\120"+
    "\1\121\1\234\10\0\1\117\1\120\1\121\4\0\1\234"+
    "\43\0\1\106\1\0\10\u019b\2\116\7\0\1\117\1\120"+
    "\1\121\1\234\10\0\1\117\1\120\1\121\4\0\1\234"+
    "\45\0\12\u019c\6\0\4\u019c\1\344\5\0\6\u019c\4\0"+
    "\1\344\43\0\1\106\1\0\10\u019d\2\116\7\0\1\117"+
    "\1\120\1\121\1\234\10\0\1\117\1\120\1\121\4\0"+
    "\1\234\43\0\1\106\1\0\10\u019e\2\116\7\0\1\117"+
    "\1\120\1\121\1\234\10\0\1\117\1\120\1\121\4\0"+
    "\1\234\45\0\12\u019f\6\0\4\u019f\1\344\5\0\6\u019f"+
    "\4\0\1\344\43\0\1\106\1\0\10\u01a0\2\116\7\0"+
    "\1\117\1\120\1\121\1\234\10\0\1\117\1\120\1\121"+
    "\4\0\1\234\43\0\1\106\1\0\10\u01a1\2\116\7\0"+
    "\1\117\1\120\1\121\1\234\10\0\1\117\1\120\1\121"+
    "\4\0\1\234\45\0\12\u01a2\6\0\4\u01a2\1\344\5\0"+
    "\6\u01a2\4\0\1\344\43\0\1\106\1\0\10\u01a3\2\116"+
    "\7\0\1\117\1\120\1\121\1\234\10\0\1\117\1\120"+
    "\1\121\4\0\1\234\45\0\12\u01a4\6\0\4\u01a4\1\344"+
    "\5\0\6\u01a4\4\0\1\344\43\0\1\106\1\0\10\u01a5"+
    "\2\116\7\0\1\117\1\120\1\121\1\234\10\0\1\117"+
    "\1\120\1\121\4\0\1\234\71\0\1\344\17\0\1\344"+
    "\43\0\1\106\1\0\10\u01a6\2\116\7\0\1\117\1\120"+
    "\1\121\1\234\10\0\1\117\1\120\1\121\4\0\1\234"+
    "\43\0\1\106\1\0\10\u01a7\2\116\7\0\1\117\1\120"+
    "\1\121\1\234\10\0\1\117\1\120\1\121\4\0\1\234"+
    "\43\0\1\106\1\0\10\u01a8\2\116\7\0\1\117\1\120"+
    "\1\121\1\234\10\0\1\117\1\120\1\121\4\0\1\234"+
    "\43\0\1\106\1\0\12\116\7\0\1\117\1\120\1\121"+
    "\1\234\10\0\1\117\1\120\1\121\4\0\1\234\20\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[23014];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\1\11\3\1\3\11\2\1\1\11"+
    "\5\1\2\11\3\1\3\11\23\1\1\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\11\2\1\10\11\1\0\1\11"+
    "\1\1\1\0\1\1\1\11\5\1\1\11\1\0\2\11"+
    "\1\0\1\1\3\11\1\1\1\11\50\1\5\11\2\1"+
    "\7\11\12\1\2\0\1\11\2\1\1\0\3\1\2\11"+
    "\60\1\4\11\2\0\6\11\1\0\2\1\1\11\1\1"+
    "\1\11\56\1\1\0\46\1\1\0\33\1\1\0\23\1"+
    "\1\0\15\1\1\0\11\1\1\0\6\1\1\11\2\1"+
    "\1\0\3\1\1\0\3\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[424];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuilder string = new StringBuilder();

  private Symbol symbol(int type) {
    return new JavaSymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new JavaSymbol(type, yyline+1, yycolumn+1, value);
  }

  /**
   * assumes correct representation of a long value for
   * specified radix in scanner buffer from <code>start</code>
   * to <code>end</code>
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
          // fall through
          case 139: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 140: break;
          case 3:
            { return symbol(NOT);
            }
          // fall through
          case 141: break;
          case 4:
            { yybegin(STRING); string.setLength(0);
            }
          // fall through
          case 142: break;
          case 5:
            { return symbol(IDENTIFIER, yytext());
            }
          // fall through
          case 143: break;
          case 6:
            { return symbol(MOD);
            }
          // fall through
          case 144: break;
          case 7:
            { return symbol(AND);
            }
          // fall through
          case 145: break;
          case 8:
            { yybegin(CHARLITERAL);
            }
          // fall through
          case 146: break;
          case 9:
            { return symbol(LPAREN);
            }
          // fall through
          case 147: break;
          case 10:
            { return symbol(RPAREN);
            }
          // fall through
          case 148: break;
          case 11:
            { return symbol(MULT);
            }
          // fall through
          case 149: break;
          case 12:
            { return symbol(PLUS);
            }
          // fall through
          case 150: break;
          case 13:
            { return symbol(COMMA);
            }
          // fall through
          case 151: break;
          case 14:
            { return symbol(MINUS);
            }
          // fall through
          case 152: break;
          case 15:
            { return symbol(DOT);
            }
          // fall through
          case 153: break;
          case 16:
            { return symbol(DIV);
            }
          // fall through
          case 154: break;
          case 17:
            { return symbol(INTEGER_LITERAL, Integer.valueOf(yytext()));
            }
          // fall through
          case 155: break;
          case 18:
            { return symbol(COLON);
            }
          // fall through
          case 156: break;
          case 19:
            { return symbol(SEMICOLON);
            }
          // fall through
          case 157: break;
          case 20:
            { return symbol(LT);
            }
          // fall through
          case 158: break;
          case 21:
            { return symbol(EQ);
            }
          // fall through
          case 159: break;
          case 22:
            { return symbol(GT);
            }
          // fall through
          case 160: break;
          case 23:
            { return symbol(QUESTION);
            }
          // fall through
          case 161: break;
          case 24:
            { return symbol(LBRACK);
            }
          // fall through
          case 162: break;
          case 25:
            { return symbol(RBRACK);
            }
          // fall through
          case 163: break;
          case 26:
            { return symbol(XOR);
            }
          // fall through
          case 164: break;
          case 27:
            { return symbol(OR);
            }
          // fall through
          case 165: break;
          case 28:
            { return symbol(COMP);
            }
          // fall through
          case 166: break;
          case 29:
            { string.append( yytext() );
            }
          // fall through
          case 167: break;
          case 30:
            { throw new RuntimeException("Unterminated string at end of line");
            }
          // fall through
          case 168: break;
          case 31:
            { yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString());
            }
          // fall through
          case 169: break;
          case 32:
            { throw new RuntimeException("Unterminated character literal at end of line");
            }
          // fall through
          case 170: break;
          case 33:
            { return symbol(NOTEQ);
            }
          // fall through
          case 171: break;
          case 34:
            { return symbol(MODEQ);
            }
          // fall through
          case 172: break;
          case 35:
            { return symbol(ANDAND);
            }
          // fall through
          case 173: break;
          case 36:
            { return symbol(ANDEQ);
            }
          // fall through
          case 174: break;
          case 37:
            { return symbol(MULTEQ);
            }
          // fall through
          case 175: break;
          case 38:
            { return symbol(PLUSPLUS);
            }
          // fall through
          case 176: break;
          case 39:
            { return symbol(PLUSEQ);
            }
          // fall through
          case 177: break;
          case 40:
            { return symbol(MINUSMINUS);
            }
          // fall through
          case 178: break;
          case 41:
            { return symbol(MINUSEQ);
            }
          // fall through
          case 179: break;
          case 42:
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
            }
          // fall through
          case 180: break;
          case 43:
            { return symbol(DIVEQ);
            }
          // fall through
          case 181: break;
          case 44:
            { return symbol(INTEGER_LITERAL, Integer.valueOf((int) parseLong(0, yylength(), 8)));
            }
          // fall through
          case 182: break;
          case 45:
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
            }
          // fall through
          case 183: break;
          case 46:
            { return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
            }
          // fall through
          case 184: break;
          case 47:
            { return symbol(INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
            }
          // fall through
          case 185: break;
          case 48:
            { return symbol(LSHIFT);
            }
          // fall through
          case 186: break;
          case 49:
            { return symbol(LTEQ);
            }
          // fall through
          case 187: break;
          case 50:
            { return symbol(EQEQ);
            }
          // fall through
          case 188: break;
          case 51:
            { return symbol(GTEQ);
            }
          // fall through
          case 189: break;
          case 52:
            { return symbol(RSHIFT);
            }
          // fall through
          case 190: break;
          case 53:
            { return symbol(XOREQ);
            }
          // fall through
          case 191: break;
          case 54:
            { return symbol(DO);
            }
          // fall through
          case 192: break;
          case 55:
            { return symbol(IF);
            }
          // fall through
          case 193: break;
          case 56:
            { return symbol(OREQ);
            }
          // fall through
          case 194: break;
          case 57:
            { return symbol(OROR);
            }
          // fall through
          case 195: break;
          case 58:
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          // fall through
          case 196: break;
          case 59:
            { string.append( '\"' );
            }
          // fall through
          case 197: break;
          case 60:
            { string.append( '\'' );
            }
          // fall through
          case 198: break;
          case 61:
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            }
          // fall through
          case 199: break;
          case 62:
            { string.append( '\\' );
            }
          // fall through
          case 200: break;
          case 63:
            { string.append( '\b' );
            }
          // fall through
          case 201: break;
          case 64:
            { string.append( '\f' );
            }
          // fall through
          case 202: break;
          case 65:
            { string.append( '\n' );
            }
          // fall through
          case 203: break;
          case 66:
            { string.append( '\r' );
            }
          // fall through
          case 204: break;
          case 67:
            { string.append( '\t' );
            }
          // fall through
          case 205: break;
          case 68:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yytext().charAt(0));
            }
          // fall through
          case 206: break;
          case 69:
            { return symbol(INTEGER_LITERAL, new Long(parseLong(0, yylength()-1, 8)));
            }
          // fall through
          case 207: break;
          case 70:
            { return symbol(INTEGER_LITERAL, Integer.valueOf((int) parseLong(2, yylength(), 16)));
            }
          // fall through
          case 208: break;
          case 71:
            { return symbol(LSHIFTEQ);
            }
          // fall through
          case 209: break;
          case 72:
            { return symbol(RSHIFTEQ);
            }
          // fall through
          case 210: break;
          case 73:
            { return symbol(URSHIFT);
            }
          // fall through
          case 211: break;
          case 74:
            { return symbol(RBRACE);
            }
          // fall through
          case 212: break;
          case 75:
            { return symbol(FOR);
            }
          // fall through
          case 213: break;
          case 76:
            { return symbol(INT);
            }
          // fall through
          case 214: break;
          case 77:
            { return symbol(NEW);
            }
          // fall through
          case 215: break;
          case 78:
            { return symbol(TRY);
            }
          // fall through
          case 216: break;
          case 79:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\"');
            }
          // fall through
          case 217: break;
          case 80:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\'');
            }
          // fall through
          case 218: break;
          case 81:
            { yybegin(YYINITIAL);
			                              int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                            return symbol(CHARACTER_LITERAL, (char)val);
            }
          // fall through
          case 219: break;
          case 82:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\\');
            }
          // fall through
          case 220: break;
          case 83:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\b');
            }
          // fall through
          case 221: break;
          case 84:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\f');
            }
          // fall through
          case 222: break;
          case 85:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\n');
            }
          // fall through
          case 223: break;
          case 86:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\r');
            }
          // fall through
          case 224: break;
          case 87:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\t');
            }
          // fall through
          case 225: break;
          case 88:
            { return symbol(INTEGER_LITERAL, new Long(parseLong(2, yylength()-1, 16)));
            }
          // fall through
          case 226: break;
          case 89:
            { return symbol(URSHIFTEQ);
            }
          // fall through
          case 227: break;
          case 90:
            { return symbol(BYTE);
            }
          // fall through
          case 228: break;
          case 91:
            { return symbol(CASE);
            }
          // fall through
          case 229: break;
          case 92:
            { return symbol(CHAR);
            }
          // fall through
          case 230: break;
          case 93:
            { return symbol(ELSE);
            }
          // fall through
          case 231: break;
          case 94:
            { return symbol(GOTO);
            }
          // fall through
          case 232: break;
          case 95:
            { return symbol(LONG);
            }
          // fall through
          case 233: break;
          case 96:
            { return symbol(MAIN);
            }
          // fall through
          case 234: break;
          case 97:
            { return symbol(NULL_LITERAL);
            }
          // fall through
          case 235: break;
          case 98:
            { return symbol(THIS);
            }
          // fall through
          case 236: break;
          case 99:
            { return symbol(BOOLEAN_LITERAL, true);
            }
          // fall through
          case 237: break;
          case 100:
            { return symbol(VOID);
            }
          // fall through
          case 238: break;
          case 101:
            { return symbol(LBRACE);
            }
          // fall through
          case 239: break;
          case 102:
            { return symbol(BREAK);
            }
          // fall through
          case 240: break;
          case 103:
            { return symbol(CATCH);
            }
          // fall through
          case 241: break;
          case 104:
            { return symbol(CLASS);
            }
          // fall through
          case 242: break;
          case 105:
            { return symbol(CONST);
            }
          // fall through
          case 243: break;
          case 106:
            { return symbol(BOOLEAN_LITERAL, false);
            }
          // fall through
          case 244: break;
          case 107:
            { return symbol(FINAL);
            }
          // fall through
          case 245: break;
          case 108:
            { return symbol(FLOAT);
            }
          // fall through
          case 246: break;
          case 109:
            { return symbol(PRINT);
            }
          // fall through
          case 247: break;
          case 110:
            { return symbol(SHORT);
            }
          // fall through
          case 248: break;
          case 111:
            { return symbol(SUPER);
            }
          // fall through
          case 249: break;
          case 112:
            { return symbol(THROW);
            }
          // fall through
          case 250: break;
          case 113:
            { return symbol(WHILE);
            }
          // fall through
          case 251: break;
          case 114:
            { return symbol(DOUBLE);
            }
          // fall through
          case 252: break;
          case 115:
            { return symbol(IMPORT);
            }
          // fall through
          case 253: break;
          case 116:
            { return symbol(NATIVE);
            }
          // fall through
          case 254: break;
          case 117:
            { return symbol(PUBLIC);
            }
          // fall through
          case 255: break;
          case 118:
            { return symbol(RETURN);
            }
          // fall through
          case 256: break;
          case 119:
            { return symbol(STATIC);
            }
          // fall through
          case 257: break;
          case 120:
            { return symbol(SWITCH);
            }
          // fall through
          case 258: break;
          case 121:
            { return symbol(THROWS);
            }
          // fall through
          case 259: break;
          case 122:
            { return symbol(BOOLEAN);
            }
          // fall through
          case 260: break;
          case 123:
            { return symbol(DEFAULT);
            }
          // fall through
          case 261: break;
          case 124:
            { return symbol(EXTENDS);
            }
          // fall through
          case 262: break;
          case 125:
            { return symbol(FINALLY);
            }
          // fall through
          case 263: break;
          case 126:
            { return symbol(PACKAGE);
            }
          // fall through
          case 264: break;
          case 127:
            { return symbol(PRIVATE);
            }
          // fall through
          case 265: break;
          case 128:
            { return symbol(ABSTRACT);
            }
          // fall through
          case 266: break;
          case 129:
            { return symbol(CONTINUE);
            }
          // fall through
          case 267: break;
          case 130:
            { return symbol(STRICTFP);
            }
          // fall through
          case 268: break;
          case 131:
            { return symbol(VOLATILE);
            }
          // fall through
          case 269: break;
          case 132:
            { return symbol(INTERFACE);
            }
          // fall through
          case 270: break;
          case 133:
            { return symbol(PROTECTED);
            }
          // fall through
          case 271: break;
          case 134:
            { return symbol(TRANSIENT);
            }
          // fall through
          case 272: break;
          case 135:
            { return symbol(IMPLEMENTS);
            }
          // fall through
          case 273: break;
          case 136:
            { return symbol(INSTANCEOF);
            }
          // fall through
          case 274: break;
          case 137:
            { return symbol(INTEGER_LITERAL, Integer.valueOf(Integer.MIN_VALUE));
            }
          // fall through
          case 275: break;
          case 138:
            { return symbol(SYNCHRONIZED);
            }
          // fall through
          case 276: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   */
  private static String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
