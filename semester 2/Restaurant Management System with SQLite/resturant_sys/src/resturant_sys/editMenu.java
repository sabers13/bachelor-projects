/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package resturant_sys;

import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Saber
 */
public class editMenu extends javax.swing.JFrame {

    /**
     * Creates new form editMenu
     */
    public editMenu() {
        initComponents();
        setMealTable();
        setDrinkTable();
        try {
            dbMealTable();
            dbDrinkTable();
        } catch (SQLException ex) {
            Logger.getLogger(editMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(editMenu.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        submitButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        back = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        mealTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        drinkTable = new javax.swing.JTable();
        jComboBox = new javax.swing.JComboBox<>();
        orderField = new javax.swing.JTextField();
        orderLabel = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        priceField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        submitButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        submitButton.setText("Submit");
        submitButton.setToolTipText("");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        addButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        addButton.setText("+");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        removeButton.setText("-");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        back.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        back.setText("back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        mealTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        mealTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "meal", "price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        mealTable.setRowHeight(25);
        jScrollPane1.setViewportView(mealTable);

        drinkTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        drinkTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "drink", "price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        drinkTable.setRowHeight(25);
        jScrollPane4.setViewportView(drinkTable);

        jComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "meal", "drink", " " }));

        orderField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderFieldActionPerformed(evt);
            }
        });

        orderLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        orderLabel.setText("Order");

        priceLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        priceLabel.setText("Price");

        priceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(priceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(orderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(orderField, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(orderLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(orderField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jComboBox))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(priceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(priceField, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(removeButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(addButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(submitButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(back, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/*int addMeal = 0;
    int addDrink = 0;*/
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        if (mealTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Meal table is empty!");
        } else if (drinkTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Drink table is empty!");

        } else {
            try {
                deleteDbData();
                insertDataToDB();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(createMenu.class.getName()).log(Level.SEVERE, null, ex);
            }

            JOptionPane.showMessageDialog(null, "Sing up successfully");
            firstMenu backToFirstMenu = new firstMenu();
            backToFirstMenu.setVisible(true);
            this.setVisible(false);
        }

    }//GEN-LAST:event_submitButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed

        double price = price();
        String order = orderField.getText();
        if (order.length() != 0) {
            if (jComboBox.getSelectedItem() == "meal" && price != 0 && !mealRepetitiveCheck(order)) {

                MealTableModel.addRow(new Object[]{order, price});
                //addMeal++;
                orderField.setText(null);
                priceField.setText(null);

            } else if (jComboBox.getSelectedItem() == "drink" && price != 0 && !drinkRepetitiveCheck(order)) {

                DrinkTableModel.addRow(new Object[]{order, price});
                //mealTable.setModel(MealTableModel);
                //addDrink++;
                orderField.setText(null);
                priceField.setText(null);
            } else {
                if (mealRepetitiveCheck(order) || drinkRepetitiveCheck(order)) {
                    JOptionPane.showMessageDialog(null, "order value is repetetive!");
                }
                if (price == 0) {
                    JOptionPane.showMessageDialog(null, "Price value is incorrect!");
                }
                orderField.setText(null);
                priceField.setText(null);
            }
        } else {

            JOptionPane.showMessageDialog(null, "order value is incorrect!");
            orderField.setText(null);
            priceField.setText(null);
        }
        orderField.setText(null);
        priceField.setText(null);

    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        mealAndDrinkSelection();
        if (mealTable.getSelectedRow() != -1) {
            int i = mealTable.getSelectedRow();
            ((DefaultTableModel) mealTable.getModel()).removeRow(i);
        } else if (drinkTable.getSelectedRow() != -1) {
            int i = drinkTable.getSelectedRow();
            ((DefaultTableModel) drinkTable.getModel()).removeRow(i);
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        managerPanel managerPanel = new managerPanel();
        managerPanel.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backActionPerformed

    private void orderFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_orderFieldActionPerformed

    private void priceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(editMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(editMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(editMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(editMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new editMenu().setVisible(true);
            }
        });
    }

    public double price() {
        String s_price = priceField.getText();
        double price = 0;
        try {
            price = Double.parseDouble(s_price);
        } catch (NumberFormatException e) {
            //not a double
        }
        return price;
    }

    public boolean mealRepetitiveCheck(String order) {

        boolean found = false;

        for (int x = 0; x < mealTable.getRowCount(); x++) {
            int y = 0;
            if (mealTable.getModel().getValueAt(x, y).equals(order)) {//Search the model
                found = true;
                System.out.println(mealTable.getModel().getValueAt(x, y));
                System.out.println(order);

            }
        }

        return found;

    }

    public boolean drinkRepetitiveCheck(String order) {

        boolean found = false;

        for (int x = 0; x < drinkTable.getRowCount(); x++) {
            int y = 0;
            if (drinkTable.getModel().getValueAt(x, y).equals(order)) {//Search the model
                found = true;

            }
        }

        return found;

    }

    public void mealAndDrinkSelection() {
        if (mealTable.getSelectedRow() != -1) {
            if (drinkTable.getSelectedRow() != -1) {
                mealTable.getSelectionModel().clearSelection();
            }
        } else if (drinkTable.getSelectedRow() != -1) {
            if (mealTable.getSelectedRow() != -1) {
                drinkTable.getSelectionModel().clearSelection();
            }
        }
    }

    public void deleteDbData() throws ClassNotFoundException {
        String DB = managerSignIn.name();

        Class.forName("org.sqlite.JDBC");
        try (
                 Connection conn = DriverManager.getConnection("jdbc:sqlite:" + DB + ".db");  Statement stmt = conn.createStatement();) {

            String query = "DELETE FROM " + DB;
            int deletedRows = stmt.executeUpdate(query);

        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    public void insertDataToDB() throws ClassNotFoundException {
        try {
            String DB = managerSignIn.name();

            Class.forName("org.sqlite.JDBC");

            Connection conn = DriverManager.getConnection("jdbc:sqlite:" + DB + ".db");
            String a = "INSERT INTO " + DB + " (meal,drink,mealPrice,drinkPrice) VALUES(?,?,?,?)";

            for (int x = 0; x < drinkTable.getRowCount(); x++) {
                PreparedStatement pst = conn.prepareStatement(a);
                String drink = null;
                double drinkPrice = 0;

                drink = (String) drinkTable.getModel().getValueAt(x, 0);

                drinkPrice = (double) drinkTable.getModel().getValueAt(x, 1);

                pst.setString(2, drink);
                pst.setDouble(4, drinkPrice);
                pst.execute();
            }
            for (int x = 0; x < mealTable.getRowCount(); x++) {
                PreparedStatement pst = conn.prepareStatement(a);
                String meal = null;
                double mealPrice = 0;

                meal = (String) mealTable.getModel().getValueAt(x, 0);

                mealPrice = (double) mealTable.getModel().getValueAt(x, 1);

                pst.setString(1, meal);

                pst.setDouble(3, mealPrice);
                pst.execute();
            }

            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(createMenu.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void setMealTable() {

        MealTableModel.addColumn("Meal");
        MealTableModel.addColumn("Price");

        mealTable.setModel(MealTableModel);

    }

    public void setDrinkTable() {

        DrinkTableModel.addColumn("Drink");
        DrinkTableModel.addColumn("Price");

        drinkTable.setModel(DrinkTableModel);

    }

    public void dbMealTable() throws SQLException, ClassNotFoundException {
        String DB = managerSignIn.name();
        Class.forName("org.sqlite.JDBC");

        Connection conn = DriverManager.getConnection("jdbc:sqlite:" + DB + ".db");

        String a = "SELECT * FROM " + DB;

        Statement stm = conn.createStatement();
        ResultSet rs = stm.executeQuery(a);
        while (rs.next()) {
            String meal = rs.getString("meal");
            double price;
            price = rs.getDouble("mealPrice");
            if (meal != null) {
                MealTableModel.addRow(new Object[]{meal, price});
            }
        }
        rs.close();
        conn.close();

    }

    public void dbDrinkTable() throws SQLException, ClassNotFoundException {
        String DB = managerSignIn.name();
        Class.forName("org.sqlite.JDBC");

        Connection conn = DriverManager.getConnection("jdbc:sqlite:" + DB + ".db");

        String a = "SELECT * FROM " + DB;

        Statement stm = conn.createStatement();
        ResultSet rs = stm.executeQuery(a);
        while (rs.next()) {
            String drink = rs.getString("drink");
            double price;
            price = rs.getDouble("drinkPrice");
            if (drink != null) {
                DrinkTableModel.addRow(new Object[]{drink, price});
            }
        }
        rs.close();
        conn.close();
        drinkTable.setModel(DrinkTableModel);
    }

    DefaultTableModel MealTableModel = new DefaultTableModel();
    DefaultTableModel DrinkTableModel = new DefaultTableModel();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton back;
    private javax.swing.JTable drinkTable;
    private javax.swing.JComboBox<String> jComboBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable mealTable;
    private javax.swing.JTextField orderField;
    private javax.swing.JLabel orderLabel;
    private javax.swing.JTextField priceField;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables
}
